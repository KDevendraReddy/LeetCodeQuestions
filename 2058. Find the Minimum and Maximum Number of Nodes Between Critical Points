/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int prev = head.val;
        head=head.next;
        int p=1;
        List<Integer> list = new ArrayList<>();
        while(head.next != null)
        {
            p++;
            if((prev < head.val && head.val> head.next.val) || (prev > head.val && head.val < head.next.val) )
            list.add(p);
            
            prev= head.val;
            head=head.next;
        }
        if(list.size()<2)
        return new int[]{-1,-1};
        int min=Integer.MAX_VALUE;
        for(int i=1;i<list.size();i++)
        {
            if(list.get(i)-list.get(i-1) < min)
            min = list.get(i)-list.get(i-1);
        }
        int max= list.get(list.size()-1) - list.get(0);
        return new int[]{min,max};

        
    }
}
